{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","_ref","title","aboutText","mode","toggleMode","React","createElement","className","concat","href","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","role","htmlFor","style","color","Textform","props","text","setText","useState","Fragment","heading","value","onChange","event","console","log","target","rows","backgroundColor","handleUpClick","newText","toUpperCase","showAlert","handleLoClick","toLowerCase","handleClearClick","split","filter","word","trim","length","defaultProps","Alert","alert","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","Router","basename","document","body","Routes","Route","exact","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.4883f5fd.chunk.js","sourcesContent":["import React from \"react\";\nimport propTypes from \"prop-types\";\n// import { Link } from \"react-router-dom\"\n\nexport default function Navbar({\n  title = \"Set title here\",\n  aboutText = \"About\",\n  mode = \"light\",\n  toggleMode, // Make sure toggleMode is passed as prop\n}) {\n  return (\n    <nav className={`navbar navbar-expand-lg navbar-${mode} bg-${mode}`}>\n      <div className=\"container-fluid\">\n        <a className=\"navbar-brand\" href=\"/\">\n          {title}\n        </a>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-bs-toggle=\"collapse\"\n          data-bs-target=\"#navbarSupportedContent\"\n          aria-controls=\"navbarSupportedContent\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0 \">\n            <li className=\"nav-item\">\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">\n                Home\n              </a>\n            </li>\n            {/* <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"/about\">\n                {aboutText}\n              </a>\n            </li> */}\n          </ul>\n          {/* <form className=\"d-flex\">\n            <input\n              className=\"form-control me-2\"\n              type=\"search\"\n              placeholder=\"Search\"\n              aria-label=\"Search\"\n            />\n            <button className=\"btn btn-primary mx-2\" type=\"submit\">\n              Search\n            </button>\n          </form> */}\n          <div className=\"form-check form-switch\">\n            {/* Call toggleMode function onClick */}\n            <input\n              className=\"form-check-input\"\n              onClick={toggleMode} // Correctly call toggleMode\n              type=\"checkbox\"\n              role=\"switch\"\n              id=\"flexSwitchCheckDefault\"\n            />\n            <label\n              className=\"form-check-label\"\n              htmlFor=\"flexSwitchCheckDefault\"\n              style={{\n                color: mode === \"light\" ? \"black\" : \"white\", // Change label text color dynamically\n              }}\n            >\n              {mode === \"light\" ? \"Dark Mode\" : \"Light Mode\"}{\" \"}\n              {/* Toggle the text */}\n            </label>\n          </div>\n          \n        </div>\n      </div>\n    </nav>\n  );\n}\n\nNavbar.propTypes = {\n  title: propTypes.string,\n  aboutText: propTypes.string,\n  mode: propTypes.string,\n  toggleMode: propTypes.func, // Define toggleMode as a function\n};\n\nNavbar.defaultProps = {\n  title: \"Set title here\",\n  aboutText: \"About\",\n  mode: \"light\",\n};\n","import React,{useState} from 'react'\n\nexport default function Textform(props) {\n    const handleUpClick = ()=> {\n      console.log(\"Uppercase was clicked\" + text);\n      let newText = text.toUpperCase(); \n      setText(newText)\n      props.showAlert(\"Converted to uppercase\", (\"success\"))\n    } \n\n     const handleLoClick = ()=> {\n      console.log(\"Lowercase was clicked\" + text);\n      let newText = text.toLowerCase(); \n      setText(newText)\n      props.showAlert(\"Converted to lowercase\", (\"success\"))\n    }\n    \n     const handleClearClick = ()=> {\n      console.log(\"Lowercase was clicked\" + text);\n      let newText = (\"\"); \n      setText(newText)\n      props.showAlert(\"Text cleared\", (\"success\"))\n    } \n\n    const handleOnChange = (event)=> {\n      console.log(\"on change\")\n      setText(event.target.value)\n    }\n\n\n    const [text, setText] = useState (\"\");\n\n  return (\n    <>\n      <div className=\"container\">\n        <h1>{props.heading}</h1>\n        <div className=\"mb-3\">\n          <textarea\n            className=\"form-control\"\n            value={text}\n            onChange={handleOnChange}\n            id=\"myBox\"\n            rows=\"8\"\n            style={{\n              backgroundColor:\n                props.mode === \"dark\" ? \"rgb(36 54 72)\" : \"white\", // Dark background for dark mode\n              color: props.mode === \"dark\" ? \"white\" : \"black\", // White text for dark mode\n            }}\n          ></textarea>\n        </div>\n        <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>\n          Convert to Uppercase\n        </button>\n        <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>\n          Convert to Lowercase\n        </button>\n        <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>\n          Clear Text\n        </button>\n      </div>\n\n      <div className=\"container my-3\">\n        <h2>Your text summary</h2>\n        <p>{text.split(\" \").filter(word => word.trim() !== \"\").length}: words, {text.length} Characters</p> \n        <p>{0.008 * text.split(\" \").length} Minutes read</p>\n        <h2>Preview</h2>\n        <p>{text}</p>\n      </div>\n    </>\n  );\n}\n","import React from 'react'\n\nfunction Alert(props) {\n  const capitalize = (word)=>{\n  const lower = word.toLowerCase();\n  return lower.charAt(0).toUpperCase() + lower.slice(1);  \n  }  \n  return (\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n        <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg} \n    </div>\n  )\n}\n\nexport default Alert\n","import \"./App.css\";\nimport Navbar from \"./components/Navbar\";\n// import About from './components/About';\nimport Textform from \"./components/Textform\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n  \n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"rgb(53, 53, 53)\";\n      document.body.style.color = \"white\";\n      showAlert(\"Dark mode has been enabled\", \"success\");\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      document.body.style.color = \"black\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n    }\n  };\n\n  return (\n    <>\n      <Router basename=\"/textutils\">\n        {/* Navbar */}\n        <Navbar\n          title=\"TextUtils\"\n          aboutText=\"About Us\"\n          mode={mode}\n          toggleMode={toggleMode}\n        />\n        {/* Alert */}\n        <Alert alert={alert} />\n        {/* Container */}\n        <div className=\"container my-3\">\n          <Routes>\n            <Route\n              exact\n              path=\"/\"\n              element={\n                <Textform\n                  showAlert={showAlert}\n                  heading=\"Enter the text to analyze below\"\n                  mode={mode}\n                />\n              }\n            />\n            {/* Uncomment this if \"About\" page is added */}\n            {/* <Route exact path=\"/about\" element={<About />} /> */}\n          </Routes>\n        </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}